(function() {
  'use strict';

  const getParams = urlString => new URLSearchParams(urlString);
  const toQueryString = ob => new URLSearchParams(ob).toString();

  const getPlayerParams = (configKeys, params) =>
    Array.from(params.keys())
      .filter(key => !configKeys.includes(key))
      .reduce(
        (acc, filterdKey) => ({ ...acc, [filterdKey]: params.get(filterdKey) }),
        {},
      );

  const v3 = {
    embedScript({ uuid, env, playerParams, type, domain }) {
      const embedCode = document.createElement('script');
      embedCode.type = 'text/javascript';
      embedCode.id = `vidyard_embed_code_${uuid}`;
      embedCode.src = `//${domain}.vidyard.${env}/${uuid}.js?v=3.1.1&type=${type}&${toQueryString(
        playerParams,
      )}`;
      return embedCode;
    },
    lightboxImage({ uuid, domain, env }) {
      const image = document.createElement('div');
      image.className = 'outer_vidyard_wrapper';
      image.innerHTML = `
        <div class="vidyard_wrapper" onclick="fn_vidyard_${uuid}();">
          <img alt="lightbox player alt" src="//${domain}.vidyard.${env}/${uuid}.jpg?" width="360">
            <div class="vidyard_play_button">
              <a href="javascript:void(0);"></a>
            </div>
        </div>`;
      return image;
    },
    inline(options) {
      return v3.embedScript({ ...options, type: 'inline' });
    },
    lightbox(options) {
      document.head.appendChild(
        v3.embedScript({ ...options, type: 'lightbox' }),
      );
      return v3.lightboxImage(options);
    },
  };

  const v4 = {
    embedScript({ domain, env, js }) {
      const script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = `//${domain}.vidyard.${env}${js}/embed/v4.js`;
      script.async = true;
      return script;
    },
    embedImage({ domain, env, uuid, playerParams, type }) {
      const image = document.createElement('img');
      image.className = 'vidyard-player-embed';
      image.src = `//${domain}.vidyard.${env}/${uuid}.jpg`;
      image.setAttribute('data-uuid', uuid);
      image.setAttribute('data-v', 4);
      image.setAttribute('data-type', type);

      var params = { width: 360, height: 260, ...playerParams };
      Object.keys(params).forEach(key => {
        if (params[key] !== 'NA') {
          image.setAttribute(`data-${key}`, params[key]);
        }
      });

      return image;
    },
    inline(options) {
      document.head.appendChild(v4.embedScript(options));
      return v4.embedImage({ ...options, type: 'inline' });
    },
    lightbox(options) {
      document.head.appendChild(v4.embedScript(options));
      return v4.embedImage({ ...options, type: 'lightbox' });
    },
  };

  const params = getParams(window.location.search);
  const config = {
    domain: params.get('domain') || 'play',
    env: params.get('env') || 'com',
    type: params.get('type') || 'v3inline',
    uuid: params.get('uuid') || 'QK4FcA7a4LRsfd5rZa26E8',
    js: params.get('js') || '',
  };

  config.playerParams = getPlayerParams(Object.keys(config), params);
  console.log('params: ', config);

  let embed = document.createElement('p');
  switch (config.type) {
    case 'v3inline':
      embed = v3.inline(config);
      break;
    case 'v3lightbox':
      embed = v3.lightbox(config);
      break;
    case 'v4inline':
      embed = v4.inline(config);
      break;
    case 'v4lightbox':
      embed = v4.lightbox(config);
      break;
    default:
      embed.innerText = 'oh no, not a valid type';
      break;
  }
  console.log(embed);
  document.body.appendChild(embed);
})();
